#coding=utf-8
from urlparse import parse_qs as parse_url
from urlparse import urlparse
from hashlib import md5
import requests
import json
import re
from abc import ABCMeta, abstractmethod
import os
class exploit:

    '''
    Class Exploit: set config first, then loadrule, call function run at last.
    func extract: extract data from request url query and post data, replace param with "{payload}".
    func loadrule: load rules from rule config files.
    func run: run extract first, then exploit(firstly check the time inj, secondly reg match the respone with rules).
    '''

    def __init__(self,url,host,postdata,headers,method,uri=''):
        self.url=url.replace('=&','=1&') # fix null param
        self.host=host
        self.https = False
        if uri[0:5] == 'https':
            self.https = True
        self.postdata=postdata
        self.headers=headers
        if 'Content-Length' in self.headers.keys():
            del self.headers['Content-Length']
        self.method=method
        self.local_files =[]
        self.read_errors=[]
        self.bingo_payload=''
        self.bingo_respone=''
        self.time=''
        self.timecheck=False
    def sethash(self,hash):
        url=self.host+self.url+self.postdata
        self.hash=hash
    def setname(self,name):
        self.name=name

    def time_check(self):
        if self.time>=10:
            return True
    def setrequest(self,url,host,postdata,headers,method):
        self.url=url.replace('=&','=1&') # fix null param
        self.host=host
        self.postdata=postdata
        self.headers=headers
        if 'Content-Length' in self.headers.keys():
            del self.headers['Content-Length']
        self.method=method
    def check(self,respone):
        for read_errors in self.read_errors:
            if read_errors in respone:
                #print read_errors
                return True
        return False
    def setpayload(self,payload):
        self.local_files=payload
    def setkeyword(self,keyword):
        self.read_errors=keyword
    def loadrule(self):
        file=os.path.join(os.path.dirname(__file__), '../rule/')+self.name+'.rule'
        rule=open(file).read()
        local_files=re.findall('''<request>([\s\S]*?)</request>''',rule)
        read_errors=re.findall('''<respone>([\s\S]*?)</respone>''',rule)
        self.read_errors=read_errors[0].replace('\r','').split('\n')
        self.local_files=local_files[0].replace('\r','').split('\n')
    def extract(self):
        payloads=[]
        self.file=urlparse(self.url).path
        params=urlparse(self.url).query
        params=parse_url(params)
        for i in xrange(len(params)+1):
            data=''
            for k,v in params.items():
                i-=1
                vs=v=v[0]
                if i==0:
                    vs='{payload}'
                data+='%s=%s&'%(k,vs)
            if '{payload}' in data:
                f=self.file+"?"+data
                payloads.append(self.file+"?"+data)
        self.get_payloads=payloads # url params
        payloads=[]
        if self.method=='POST':
            params=parse_url(self.postdata)
            for i in xrange(len(params)+1):
                data=''
                for k,v in params.items():
                    i-=1
                    vs=v=v[0]
                    if i==0:
                        vs='{payload}'
                    data+='%s=%s&'%(k,vs)
                payloads.append(data)
        self.post_payload=payloads #post paramas

    def request(self,url='',postdata='',payload=''):
        if self.method=='GET':
            if self.https:
                req='https://'+self.host.replace(' ','')+url
            else:
                req='http://'+self.host.replace(' ','')+url
            if 'postdata' in self.headers.keys():
                del self.headers['postdata']
            #print req
            respone=requests.get(req)
        if self.method=='POST':
            if self.https:
                req='https://'+self.host.replace(' ','')+url
            else:
                req='http://'+self.host.replace(' ','')+url
            #print self.headers
            postdata=postdata.replace("{payload}",payload)
            if 'postdata' in self.headers.keys():
                del self.headers['postdata']
            respone=requests.post(req,data=postdata,headers=self.headers)
        return respone
    @abstractmethod
    def exploit(self):
        pass
    @abstractmethod
    def callback(self):
        pass
    def run(self):
        self.extract()
        return self.exploit()
